@page
@model GeoBAM.Pages.Management.IndexModel

@{
    ViewData["Title"] = "Index";
}

<h1>Index</h1>

<p>
    <a asp-page="Create">Create New</a>
</p>
<head>
<link rel="stylesheet" href="https://unpkg.com/leaflet@1.3.1/dist/leaflet.css" integrity="sha512-Rksm5RenBEKSKFjgI3a41vrjkw4EVPlJ3+OiI65vTjIdo9brlAacEuKOiQ5OFh7cOI1bkDwLqdLw3Zg0cRJAAQ==" crossorigin="" />
<link rel="stylesheet" type="text/css" href="https://unpkg.com/leaflet.markercluster@1.3.0/dist/MarkerCluster.css" />
<link rel="stylesheet" type="text/css" href="https://unpkg.com/leaflet.markercluster@1.3.0/dist/MarkerCluster.Default.css" />
<style type="text/css">
    #map { /* la carte DOIT avoir une hauteur sinon elle n'apparaît pas */
        height: 400px;
    }
</style>
<title>Carte</title>
    </head>
<body>
    <div id="map">
        <!-- Ici s'affichera la carte -->
    </div>

    <!-- Fichiers Javascript -->
    <script src="https://unpkg.com/leaflet@1.3.1/dist/leaflet.js" integrity="sha512-/Nsx9X4HebavoBvEBuyp3I7od5tA0UzAxs+j83KgC8PU0kgB4XiK4Lfe4y4cgBtaRJQEIFCW+oC506aPT2L1zw==" crossorigin=""></script>
    <script type='text/javascript' src='https://unpkg.com/leaflet.markercluster@1.3.0/dist/leaflet.markercluster.js'></script>
    <script type="text/javascript">
        // On initialise la latitude et la longitude du Maroc! (centre de la carte au démarrage de la page)
        var lat = 39.973;
        var lon = -104.99;
        // variable qui sert à contenir la carte!
        var macarte = null;
        // On importe les données chargé à partir dun modèle de la page, et on les mets dans une variable javascript, pour les afficher par la suite!
        var points =@Json.Serialize(Model.GeometricPoint);

        console.log(points);
        // block: On ajoute les layers ( l'operateur va avoir le choix de la couche qui lui plait !)
        /*var grayscale = L.tileLayer(mapboxUrl, { id: 'map', tileSize: 512, zoomOffset: -1, attribution: mapboxAttribution }),
            streets = L.tileLayer(mapboxUrl, { id: 'map', tileSize: 512, zoomOffset: -1, attribution: mapboxAttribution });

        macarte = L.map('map', {
            center: [39.73, -104.99],
            zoom: 10,
            layers: [grayscale, cities]
        });*/

        /*var baseMaps = {
            "Grayscale": grayscale,
            "Streets": streets,
            
        };*/
        // Fin Block

        console.log("ici c'est points", points);
        var markerClusters; // Servira à stocker les groupes de marqueurs
        // Nous initialisons une liste de marqueurs
       
        // Fonction d'initialisation de la carte
        function initMap() {
            var markers = []; // Nous initialisons la liste des marqueurs

            

            // Créer l'objet "macarte" et l'insèrer dans l'élément HTML qui a l'ID "map"
            macarte = L.map('map').setView([lat, lon], 11);
            /*macarte = L.map('map', {
                center: [lat, lon],
                zoom: 11,
                layers: [grayscale]
            })*/

            // On ajoute les layers au control de la page:
            //L.control.layers(baseMaps).addTo(macarte);

            markerClusters = L.markerClusterGroup(); // Nous initialisons les groupes de marqueurs

            // Leaflet ne récupère pas les cartes (tiles) sur un serveur par défaut. Nous devons lui préciser où nous souhaitons les récupérer. Ici, openstreetmap.fr
            L.tileLayer('https://{s}.tile.openstreetmap.fr/osmfr/{z}/{x}/{y}.png', {
                // Il est toujours bien de laisser le lien vers la source des données
                attribution: 'données © OpenStreetMap/ODbL - rendu OSM France',
                minZoom: 1,
                maxZoom: 20
            }).addTo(macarte);
            //aJOUT DE TIL
            L.tileLayer('https://api.mapbox.com/styles/v1/{id}/tiles/{z}/{x}/{y}?access_token={accessToken}', {
                attribution: 'Map data &copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors, Imagery © <a href="https://www.mapbox.com/">Mapbox</a>',
                maxZoom: 18,
                id: 'mapbox/streets-v11',
                tileSize: 512,
                zoomOffset: -1,
                accessToken: 'your.mapbox.access.token'
            }).addTo(macarte);
            //test
            var GeoJSONData = JSON.parse(' {"type":"FeatureCollection","features":[{"type":"Feature","properties":{},"geometry":{"type":"Point","coordinates":[-0.129347,51.516968]}}]}');
            L.geoJSON(GeoJSONData).addTo(macarte);

            console.log(JSON.stringify(GeoJSONData));
            var GeoJSONData = JSON.parse(' {"type":"FeatureCollection","features":[{"type":"Feature","properties":{},"geometry":{"type":"Point","coordinates":[-0.159347,51.716968]}}]}');
            L.geoJSON(GeoJSONData).addTo(macarte);

            console.log(JSON.stringify(GeoJSONData));
            var GeoJSONData = JSON.parse(' {"type":"FeatureCollection","features":[{"type":"Feature","properties":{},"geometry":{"type":"Point","coordinates":[-0.219347,51.916968]}}]}');
            L.geoJSON(GeoJSONData).addTo(macarte);

            console.log(JSON.stringify(GeoJSONData));
            // Nous parcourons la liste des villes
            for (point in points) {
                var marqueur = L.marker([points[point].latitude, points[point].longitude]); // pas de addTo(macarte), l'affichage sera géré par la bibliothèque des clusters
                marqueur.bindPopup("<p>" + points[point].adresse + "</p><br><p>" + points[point].city + "</p> <br> <p>" + points[point].postalcode + "</p> <br> <p>" + points[point].type+"</strong>");
                markerClusters.addLayer(marqueur); // Nous ajoutons le marqueur aux groupes
                markers.push(marqueur); // Nous ajoutons le marqueur à la liste des marqueurs
                //document.getElementById('PopUp').innerHTML = points[point].Address;
                //document.getElementById('PopUpCity').innerHTML = points[point].City;
            }
           
            var group = new L.featureGroup(markers); // Nous créons le groupe des marqueurs pour adapter le zoom
            macarte.fitBounds(group.getBounds().pad(0.5)); // Nous demandons à ce que tous les marqueurs soient visibles, et ajoutons un padding (pad(0.5)) pour que les marqueurs ne soient pas coupés
            macarte.addLayer(markerClusters);

          

        }
       
        window.onload = function () {
            // Fonction d'initialisation qui s'exécute lorsque le DOM est chargé
            initMap();
        };
    </script>

<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.GeometricPoint[0].Address)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.GeometricPoint[0].City)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.GeometricPoint[0].Longitude)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.GeometricPoint[0].Latitude)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.GeometricPoint[0].Type)
            </th>

            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model.GeometricPoint)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.Address)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.City)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Longitude)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Latitude)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Type)
                </td>

                <td>
                    <a asp-page="./Edit" asp-route-id="@item.pointID">Edit</a> |
                    <a asp-page="./Details" asp-route-id="@item.pointID">Details</a> |
                    <a asp-page="./Delete" asp-route-id="@item.pointID">Delete</a>
                </td>
            </tr>
        }
    </tbody>
</table>
    </body>
